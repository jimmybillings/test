#!/bin/sh
scriptDir=`dirname $0`
inputSourceFileName=$1

# Make sure the source file exists.
if [ ! -e "$inputSourceFileName" ]
then
  echo "ERROR: Source file not found: '$inputSourceFileName'."
  exit 1
fi

# Make sure the source file's name ends in '.ts'.
case $inputSourceFileName in
  *.ts)
    # Good!
    ;;
  *)
    echo "ERROR: Non-TypeScript source file '$inputSourceFileName' cannot be processed.  Filename must end in '.ts'." 
    exit 1
    ;;
esac

# Make sure the spec file doesn't already exist.
outputSpecFileName=`echo $inputSourceFileName | sed -e 's/\.ts$/.spec.ts/'`
if [ -e "$outputSpecFileName" ]
then
  echo "ERROR: Output spec file '$outputSpecFileName' already exists."
  exit 1
fi

# Get the file contents without comments.
inputSourceFileWithoutComments=`grep -v '^\s*//' $inputSourceFileName`

# Make sure the source file exports a class.
allExportClassLines=`echo "$inputSourceFileWithoutComments" | grep 'export class'`
if [ $? -ne 0 ]
then
  echo "ERROR: No exported class found in '$inputSourceFileName'."
  exit 1
fi

generateNullConstructorArguments() {
  # First, just test to see if there is at least one constructor.
  garbage=`echo "$inputSourceFileWithoutComments" | grep 'constructor\s*('`

  if [ $? -eq 0 ]
  then
    # Test for a constructor with no arguments.
    garbage=`echo "$inputSourceFileWithoutComments" | grep 'constructor\s*(\s*)'`

    if [ $? -eq 0 ]
    then
      # Constructor with no arguments.
      echo ''
    else
      # Constructor with arguments, so we'll have to parse it and count them.

      # Line number where the first constructor starts.
      firstLineNumber=`echo "$inputSourceFileWithoutComments" | grep -n 'constructor.*(' | head -1 | cut -f1 -d:`

      # Strip out stuff above the constructor.
      fromConstructorDown="`echo \"$inputSourceFileWithoutComments\" | tail -n +$firstLineNumber`"

      # Line number where the first constructor ends, relative to the first line number.
      # (Searches for first left brace after constructor starts, as that is presumably on or
      # just after the line on which the constructor ends.)
      relativeLastLineNumber=`echo "$fromConstructorDown" | grep -n '{' | head -1 | cut -f1 -d:`

      # Strip out everything but commas inside the constructor's parentheses.
      # commas=`echo "$fromConstructorDown" | head -$relativeLastLineNumber | grep -o ','`
      commas=`echo "$fromConstructorDown" | head -$relativeLastLineNumber | sed -e 's/[^,]//g'`

      # Convert ', ,' (for example) to 'null, null, null'
      # Deliberately lose the newlines in 'commas' to get a result like ', ,'.
      echo "`echo $commas | sed -e 's/\s*//g' -e 's/,/null, /g'`null"
    fi
  else
    # No constructor, so no arguments.
    echo ''
  fi
}

# Given a source file name like path/to/some.component.ts
# that contains 'export class SomeComponent'...

# ...generates: SomeComponent (from first exported class only)
className=`echo "$allExportClassLines" | head -1 | cut -d' ' -f3`

# ...generates: some.component
sourceFileImportName=`basename $inputSourceFileName .ts`

# ...generates: Some Component
classNameWithSpaces=`echo $className | sed -e 's/[A-Z]/\ &/g' -e 's/^ //'`

# ...generates: componentUnderTest (understands '.' and '-' as word separators)
underTestVariableName=`echo $sourceFileImportName | sed -e 's/^.*\.//' -e 's/^.*\-//'`UnderTest

# ...generates: null, null (etc.) (One null for each constructor argument)
nullConstructorArguments=`generateNullConstructorArguments`

# ...generates: path/to/some.component.spec.ts
outputSpecFileName=`echo $inputSourceFileName | sed -e 's/\.ts$/.spec.ts/'`

(
cat <<EndOfSpec
import { $className } from './$sourceFileImportName';

export function main() {
  describe('$classNameWithSpaces', () => {
    let $underTestVariableName: $className;

    beforeEach(() => {
      $underTestVariableName = new $className($nullConstructorArguments);
    });

    it('has no tests!', () => {
      expect(true).toBe(true);
    });
  });
};

EndOfSpec
) > $outputSpecFileName

echo "Created $outputSpecFileName"
exit 0
